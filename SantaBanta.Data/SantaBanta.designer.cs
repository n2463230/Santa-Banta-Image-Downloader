#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SantaBanta.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SantaBanta")]
	public partial class SantaBantaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertSubcategory(Subcategory instance);
    partial void UpdateSubcategory(Subcategory instance);
    partial void DeleteSubcategory(Subcategory instance);
    partial void InsertDownloadInformation(DownloadInformation instance);
    partial void UpdateDownloadInformation(DownloadInformation instance);
    partial void DeleteDownloadInformation(DownloadInformation instance);
    #endregion
		
		public SantaBantaDataContext() : 
				base(global::SantaBanta.Data.Properties.Settings.Default.SantaBantaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SantaBantaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SantaBantaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SantaBantaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SantaBantaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Subcategory> Subcategories
		{
			get
			{
				return this.GetTable<Subcategory>();
			}
		}
		
		public System.Data.Linq.Table<DownloadInformation> DownloadInformations
		{
			get
			{
				return this.GetTable<DownloadInformation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CategoryName;
		
		private string _CategoryURL;
		
		private EntitySet<Subcategory> _Subcategories;
		
		private EntitySet<DownloadInformation> _DownloadInformations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryURLChanging(string value);
    partial void OnCategoryURLChanged();
    #endregion
		
		public Category()
		{
			this._Subcategories = new EntitySet<Subcategory>(new Action<Subcategory>(this.attach_Subcategories), new Action<Subcategory>(this.detach_Subcategories));
			this._DownloadInformations = new EntitySet<DownloadInformation>(new Action<DownloadInformation>(this.attach_DownloadInformations), new Action<DownloadInformation>(this.detach_DownloadInformations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(MAX)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryURL", DbType="NVarChar(MAX)")]
		public string CategoryURL
		{
			get
			{
				return this._CategoryURL;
			}
			set
			{
				if ((this._CategoryURL != value))
				{
					this.OnCategoryURLChanging(value);
					this.SendPropertyChanging();
					this._CategoryURL = value;
					this.SendPropertyChanged("CategoryURL");
					this.OnCategoryURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subcategory", Storage="_Subcategories", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Subcategory> Subcategories
		{
			get
			{
				return this._Subcategories;
			}
			set
			{
				this._Subcategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_DownloadInformation", Storage="_DownloadInformations", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<DownloadInformation> DownloadInformations
		{
			get
			{
				return this._DownloadInformations;
			}
			set
			{
				this._DownloadInformations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subcategories(Subcategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Subcategories(Subcategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_DownloadInformations(DownloadInformation entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_DownloadInformations(DownloadInformation entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subcategory")]
	public partial class Subcategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CategoryId;
		
		private string _SubcategoryName;
		
		private string _SubcategoryURL;
		
		private EntitySet<DownloadInformation> _DownloadInformations;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnSubcategoryNameChanging(string value);
    partial void OnSubcategoryNameChanged();
    partial void OnSubcategoryURLChanging(string value);
    partial void OnSubcategoryURLChanged();
    #endregion
		
		public Subcategory()
		{
			this._DownloadInformations = new EntitySet<DownloadInformation>(new Action<DownloadInformation>(this.attach_DownloadInformations), new Action<DownloadInformation>(this.detach_DownloadInformations));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubcategoryName", DbType="NVarChar(MAX)")]
		public string SubcategoryName
		{
			get
			{
				return this._SubcategoryName;
			}
			set
			{
				if ((this._SubcategoryName != value))
				{
					this.OnSubcategoryNameChanging(value);
					this.SendPropertyChanging();
					this._SubcategoryName = value;
					this.SendPropertyChanged("SubcategoryName");
					this.OnSubcategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubcategoryURL", DbType="NVarChar(MAX)")]
		public string SubcategoryURL
		{
			get
			{
				return this._SubcategoryURL;
			}
			set
			{
				if ((this._SubcategoryURL != value))
				{
					this.OnSubcategoryURLChanging(value);
					this.SendPropertyChanging();
					this._SubcategoryURL = value;
					this.SendPropertyChanged("SubcategoryURL");
					this.OnSubcategoryURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_DownloadInformation", Storage="_DownloadInformations", ThisKey="Id", OtherKey="SubcategoryId")]
		public EntitySet<DownloadInformation> DownloadInformations
		{
			get
			{
				return this._DownloadInformations;
			}
			set
			{
				this._DownloadInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subcategory", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Subcategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Subcategories.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DownloadInformations(DownloadInformation entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = this;
		}
		
		private void detach_DownloadInformations(DownloadInformation entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DownloadInformation")]
	public partial class DownloadInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CategoryId;
		
		private System.Nullable<int> _SubcategoryId;
		
		private string _ImageName;
		
		private string _ImageURL;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Subcategory> _Subcategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnSubcategoryIdChanging(System.Nullable<int> value);
    partial void OnSubcategoryIdChanged();
    partial void OnImageNameChanging(string value);
    partial void OnImageNameChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    #endregion
		
		public DownloadInformation()
		{
			this._Category = default(EntityRef<Category>);
			this._Subcategory = default(EntityRef<Subcategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubcategoryId", DbType="Int")]
		public System.Nullable<int> SubcategoryId
		{
			get
			{
				return this._SubcategoryId;
			}
			set
			{
				if ((this._SubcategoryId != value))
				{
					if (this._Subcategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubcategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SubcategoryId = value;
					this.SendPropertyChanged("SubcategoryId");
					this.OnSubcategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageName", DbType="NVarChar(MAX)")]
		public string ImageName
		{
			get
			{
				return this._ImageName;
			}
			set
			{
				if ((this._ImageName != value))
				{
					this.OnImageNameChanging(value);
					this.SendPropertyChanging();
					this._ImageName = value;
					this.SendPropertyChanged("ImageName");
					this.OnImageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL", DbType="NVarChar(MAX)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_DownloadInformation", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.DownloadInformations.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.DownloadInformations.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_DownloadInformation", Storage="_Subcategory", ThisKey="SubcategoryId", OtherKey="Id", IsForeignKey=true)]
		public Subcategory Subcategory
		{
			get
			{
				return this._Subcategory.Entity;
			}
			set
			{
				Subcategory previousValue = this._Subcategory.Entity;
				if (((previousValue != value) 
							|| (this._Subcategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subcategory.Entity = null;
						previousValue.DownloadInformations.Remove(this);
					}
					this._Subcategory.Entity = value;
					if ((value != null))
					{
						value.DownloadInformations.Add(this);
						this._SubcategoryId = value.Id;
					}
					else
					{
						this._SubcategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subcategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
